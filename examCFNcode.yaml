Parameters:

  vpcCIDR:
    Type: String
    Default: "10.50.0.0/16"
    Description: "Enter Your VPC CIDR"
  
  subnet1CIDR:
    Type: String
    Default: "10.50.1.0/24"
    Description: "Enter Your subnet1 CIDR"

  subnet2CIDR:
    Type: String
    Default: "10.50.2.0/24"
    Description: "Enter Your subnet2 CIDR"

  subnet3CIDR:
    Type: String
    Default: "10.50.3.0/24"
    Description: "Enter Your subnet3 CIDR"
  
  subnet4CIDR:
    Type: String
    Default: "10.50.4.0/24"
    Description: "Enter Your subnet4 CIDR"
  
  avzones1:
    Type: String
    Default: "us-east-1a"
    Description: "Enter Your AZ1 ID"

  avzones2:
    Type: String
    Default: "us-east-1b"
    Description: "Enter Your AZ2 ID"

  NatGW:
    Type: String
    Description: "The ID of the NAT Gateway"

  InstanceTypeParameter:
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.micro
      - m1.small
      - m1.large
    Description: Enter t2.micro, m1.small, or m1.large. Default is t2.micro.
  
  EC2KeyPair:
    Type: AWS::EC2::KeyPair::KeyName
  
  amiID:
    Type: String
    Default: "ami-0bb84b8ffd87024d8"
    Description: "Enter Your EC2 AMI ID"
  

Resources:

  customVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref vpcCIDR
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
       - Key: stack
         Value: production

  customInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: stack
        Value: production

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: customVPC 
      InternetGatewayId:
        Ref: customInternetGateway
  
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:  
        Ref: customVPC
      Tags:
      - Key: stack
        Value: production

  myRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
       RouteTableId:
         Ref: PublicRouteTable
       DestinationCidrBlock: 0.0.0.0/0
       GatewayId:
         Ref: customInternetGateway

  PrivSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !Ref subnet2CIDR
      AvailabilityZone: !Ref avzones1
      Tags:
      - Key: stack
        Value: production

  
  PblicSub1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !Ref subnet1CIDR
      AvailabilityZone: !Ref avzones1
      MapPublicIpOnLaunch: true
      Tags:
      - Key: stack
        Value: production

  PrivSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !Ref subnet4CIDR
      AvailabilityZone: !Ref avzones2
      Tags:
      - Key: stack
        Value: production

  PblicSub2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: customVPC
      CidrBlock: !Ref subnet3CIDR
      AvailabilityZone: !Ref avzones2
      MapPublicIpOnLaunch: true
      Tags:
      - Key: stack
        Value: production

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PblicSub1
      RouteTableId:
        Ref: PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PblicSub2
      RouteTableId:
        Ref: PublicRouteTable

  MyEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: 'vpc'

  NATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MyEIP.AllocationId
      SubnetId: !Ref PblicSub1


  PrivRTab:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref customVPC

  PrivRT:
    Type:  AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PrivRTab
      DestinationCidrBlock: 0.0.0.0/0
    

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivSub1
      RouteTableId: !Ref PrivRTab

  Subnet4RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivSub2
      RouteTableId: !Ref PrivRTab

 
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId: !Ref customVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: 0.0.0.0/0

  
  MyEC2Instance: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref amiID
      KeyName: !Ref EC2KeyPair
      InstanceType: !Ref InstanceTypeParameter
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref PblicSub1
  
  MyEC2Instance2: 
    Type: AWS::EC2::Instance
    Properties: 
      ImageId: !Ref amiID
      KeyName: !Ref EC2KeyPair
      InstanceType: !Ref InstanceTypeParameter
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      SubnetId: !Ref PrivSub1

  MyDynamoDBTable:
    Type: "AWS::DynamoDB::Table"
    Properties: 
      TableName: "metroddb"
      AttributeDefinitions: 
        - 
          AttributeName: "PrimaryKey"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "PrimaryKey"
          KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      
 